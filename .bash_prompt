#!/bin/bash
# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Taken from @jessfraz'z prompt: https://github.com/jessfraz/dotfiles
# iTerm â†’ Profiles â†’ Text â†’ use 13pt Monaco with 1.1 vertical spacing.
# vim: set filetype=sh :

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
				git update-index --really-refresh -q &> /dev/null;
			fi;

			# Check for uncommitted changes in the index.
			if ! git diff --quiet --ignore-submodules --cached; then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! git diff-files --quiet --ignore-submodules --; then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if git rev-parse --verify refs/stash &>/dev/null; then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${blue}${s}";
	else
		return;
	fi;
}

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 17);
	blue=$(tput setaf 61);
	cyan=$(tput setaf 117);
	green=$(tput setaf 84);
	orange=$(tput setaf 215);
	purple=$(tput setaf 141);
	red=$(tput setaf 203);
	violet=$(tput setaf 141);
	white=$(tput setaf 231);
	yellow=$(tput setaf 228);
else
	bold='';
	reset="\\e[0m";
	# shellcheck disable=SC2034
	black="\\e[1;30m";
	blue="\\e[1;34m";
	cyan="\\e[1;36m";
	green="\\e[1;32m";
	# shellcheck disable=SC2034
	orange="\\e[1;33m";
	# shellcheck disable=SC2034
	purple="\\e[1;35m";
	# shellcheck disable=SC2034
	red="\\e[1;31m";
	# shellcheck disable=SC2034
	violet="\\e[1;35m";
	white="\\e[1;37m";
	yellow="\\e[1;33m";
fi;

# Set the terminal title to the current working directory.
PS1="\\[\\033]0;\\w\\007\\]";
PS1+="\\[${bold}\\]\\n"; # newline
PS1+="\\[${orange}\\]\\u"; # username
PS1+="\\[${white}\\] in ";
PS1+="\\[${cyan}\\]\\w"; # working directory
PS1+="\$(prompt_git \"${white} on ${green}\")"; # Git repository details
PS1+="\\n";
PS1+="\\[${white}\\]ðŸ¥• \\[${reset}\\]"; # `$` (and reset color)
export PS1;

PS2="\\[${yellow}\\]â†’ \\[${reset}\\]";
export PS2;